{"mappings":";;;;;;;;;;;AECA;AAEA,wBAAwB;AACxB,MAAM;AAEN,6BAA6B;AAC7B,MAAM;AAEN,6BAA6B;AAC7B,gBAAS,QAAQ,6BAAO;IACpB,QAAQ;AACR,GACC,KAAK;IACJ,QAAQ,IAAI;AACd,GACC,MAAM,CAAC;IACN,QAAQ,IAAI,0BAA0B;AACxC;AAEJ,4BAAiB;;;ADlBjB,wBAAwB;AACxB,MAAM;AAEN,yBAAyB;AACzB,MAAM,uCAAiB,IAAI,iCAAgB;IACzC,UAAU;QACR,MAAM;QACN,UAAU;IACZ;IACA,KAAK;QACH,MAAM;QACN,UAAU;IACZ;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;IACA,mBAAmB;QACjB,MAAM;QACN,UAAU;IACZ;AACF;AAEA,2BAA2B;AAC3B,IAAI,sCAAgB,gCAAe,sCAAgB,SAAO;AAE1D,eAAe;AACf,4BAAiB;;;ADzBjB,cAAc;AACd,MAAM,6BAAO;AAEb,qBAAqB;AACrB,MAAM,4BAAM;AAEZ,qCAAqC;AACrC,0BAAI,IAAI;AAER,gCAAgC;AAChC,0BAAI,IAAI,eAAQ;AAEhB,8BAA8B;AAC9B,0BAAI,OAAO,4BAAM;IACb,QAAQ,IAAI,kBAAkB,6BAAO;AACvC;AAEF,oBAAoB;AACpB,0BAAI,MAAM,cAAc,IAAI,OAAO,KAAK;IACpC,IAAI,YAAY,EAAE;IAClB,IAAG;QACD,YAAY,MAAM,0BAAc,KAAK,CAAC;QACtC,IAAI,OAAO,KAAK,KAAK;IACvB,EAAE,OAAM,KAAK;QACX,IAAI,OAAO,KAAK,KAAK;IACvB;AACJ;AAEA,0BAA0B;AAC1B,0BAAI,MAAM,sBAAsB,IAAI,OAAO,KAAK;IAC5C,MAAM,KAAK,IAAI,OAAO;IAEtB,IAAG;QACD,MAAM,SAAS,MAAM,0BAAc,SAAS;QAE5C,IAAI,CAAC,QAAQ;YACX,IAAI,OAAO,KAAK,KAAK;gBAAE,OAAO;YAA8B;YAC5D;QACF;QACA,IAAI,OAAO,KAAK,KAAK;IACvB,EAAE,OAAM,KAAK;QACX,IAAI,OAAO,KAAK,KAAK;IACvB;AACJ;AAEA,wBAAwB;AACxB,0BAAI,MAAM,mBAAmB,KAAK,OAAO,KAAK;IAC1C,MAAM,MAAM,IAAI,0BAAc,IAAI;IAElC,IAAI;QACF,MAAM,IAAI;QAEV,IAAI,OAAO,KAAK,KAAK;YAAE,SAAS;QAAuB;IACzD,EAAE,OAAM,KAAK;QACX,IAAI,OAAO,KAAK,KAAK;IACvB;AACF;AAEF,oBAAoB;AACpB,0BAAI,MAAM,uBAAuB,IAAI,OAAO,KAAK;IAC7C,MAAM,KAAK,IAAI,OAAO;IACtB,MAAM,UAAU,IAAI;IAEpB,IAAI;QACF,MAAM,SAAS,MAAM,0BAAc,kBAAkB,IAAI;QAEzD,IAAI,OAAO,gBAAgB,GAAG;YAC5B,IAAI,OAAO,KAAK,KAAK;gBAAE,OAAO;YAAoC;YAClE;QACF;QACA,IAAI,OAAO,KAAK,KAAK;IACvB,EAAE,OAAM,KAAK;QACX,IAAI,OAAO,KAAK,KAAK;IACvB;AACF;AAEF,oBAAoB;AACpB,0BAAI,MAAM,kBAAkB,OAAO,OAAO,KAAK;IAC3C,MAAM,KAAK,IAAI,OAAO;IAEtB,IAAI;QACF,MAAM,SAAS,MAAM,0BAAc,kBAAkB;QAErD,IAAI,CAAC,QACH,IAAI,OAAO,KAAK,KAAK;YAAE,OAAO;QAAqB;QAErD,IAAI,OAAO,KAAK,KAAK;IACvB,EAAE,OAAM,KAAK;QACX,IAAI,OAAO,KAAK,KAAK;IACvB;AACF","sources":["src/server.js","src/dbPasswordSchema.js","src/dbConnection.js"],"sourcesContent":["const express = require(\"express\");\nconst cors = require(\"cors\");\nconst passwordModel = require(\"./dbPasswordSchema.js\");\n\n// Define port\nconst port = 3600;\n\n// Create Express app\nconst app = express();\n\n// Add CORS to all routes and methods\napp.use(cors());\n\n// Enable parsing of JSON bodies\napp.use(express.json());\n\n// start listening to the port\napp.listen(port, () => {\n    console.log(\"Listening on \" + port + \".\");\n  }); \n\n// Get all passwords\napp.route(\"/passwords\").get(async (req, res) => {\n    let passwords = [];\n    try{\n      passwords = await passwordModel.find({});\n      res.status(201).json(passwords);\n    } catch(err) {\n      res.status(500).send(err);\n    }\n});\n\n// Get a specific password\napp.route(\"/password-edit/:id\").get(async (req, res) => {\n    const id = req.params.id;\n\n    try{\n      const result = await passwordModel.findById(id);\n\n      if (!result) {\n        res.status(404).json({ error: \"Searched password not found\" });\n        return;\n      }\n      res.status(201).json(result);\n    } catch(err) {\n      res.status(500).send(err);\n    }\n});\n\n// Create a new password\napp.route(\"/passwords-edit\").post(async (req, res) => {\n    const doc = new passwordModel(req.body);\n\n    try {\n      await doc.save();\n      \n      res.status(201).json({ message: \"New password created\" });\n    } catch(err) {\n      res.status(500).send(err);\n    }\n  });\n\n// Update a password\napp.route(\"/passwords-edit/:id\").put(async (req, res) => {\n    const id = req.params.id;\n    const docBody = req.body;\n\n    try {\n      const result = await passwordModel.findByIdAndUpdate(id, docBody);\n\n      if (result.matchedCount == 0) {\n        res.status(404).json({ error: \"Could not find password to update\" });\n        return;\n      }\n      res.status(201).json(result);\n    } catch(err) {\n      res.status(500).send(err);\n    }\n  });\n\n// Delete a password\napp.route(\"/passwords/:id\").delete(async (req, res) => {\n    const id = req.params.id;\n\n    try {\n      const result = await passwordModel.findByIdAndDelete(id);\n\n      if (!result) {\n        res.status(404).json({ error: \"password not found\" });\n      }\n      res.status(201).send(result);\n    } catch(err) {\n      res.status(500).send(err);\n    }\n  });\n","const mongoose = require(\"./dbConnection.js\");\n\n// Initialize parameters\nconst collectionName = process.env.DB_COLLECTION;\n\n// create mongoose schema\nconst passwordSchema = new mongoose.Schema({\n  category: {\n    type: String,\n    required: true\n  },\n  app: {\n    type: String,\n    required: true\n  },\n  userName: {\n    type: String,\n    required: true\n  },\n  encryptedPassword: {\n    type: String,\n    required: true\n  }\n});\n\n// create model from schema\nlet passwordModel = mongoose.model(collectionName, schema=passwordSchema);\n\n// export model\nmodule.exports = passwordModel;","const mongoose = require(\"mongoose\");\nrequire('dotenv').config();\n\n// Initialize parameters\nconst dbName = process.env.DB_NAME;\n\n// database connection string\nconst dbUrl = process.env.MONGODB_URL;\n\n// create database connection\nmongoose.connect(dbUrl, {\n    dbName: dbName\n    })\n    .then(() => {\n      console.log(\"Connected to DB\");\n    })\n    .catch((err) => {\n      console.log(\"Error connecting to DB\", err);\n    })\n\nmodule.exports = mongoose;"],"names":[],"version":3,"file":"index.js.map"}